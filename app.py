#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
from flask import Flask, request, jsonify, render_template, send_file
from dotenv import load_dotenv
from openai import OpenAI
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
import io

# Charger .env ou apikey.env
load_dotenv("apikey.env")

# Initialiser le client OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

app = Flask(__name__)

# ------------------------------
# PAGE Dâ€™ACCUEIL
# ------------------------------
@app.route("/")
def index():
    print("ðŸ‘‰ index.html rendu")
    return render_template("index.html")

# ------------------------------
# GÃ‰NÃ‰RATION DES PROPOSITIONS
# ------------------------------
@app.route("/generate", methods=["POST"])
def generate():
    try:
        data = request.get_json()
        prompt = data.get("prompt", "")

        if not prompt:
            return jsonify({"error": "Prompt manquant"}), 400

        # CONTEXTE SYSTEM
                # âœ… Prompt enrichi
        system_prompt = (
            "Tu t'appelles Will.ia et tu es un expert en marketing et communication spÃ©cialisÃ© dans le sport. Tu as 10 ans d'expÃ©rience. Tu as travaillÃ© pour Take off, EA Sports, Classico sport, Elwing Boards et Sportall."
            "Ta mission est de proposer des activations marketing et communication CONCRÃˆTES et DÃ‰TAILLÃ‰ES. "
            "Structure toujours tes rÃ©ponses ainsi :\n\n"
            " ðŸ’»  *ACTIVATION* (titre en majuscules et italique)\n"

            "   â†’ DÃ©cris le concept clairement.\n\n"

            " ðŸ¤³  *INFLUENCEURS / ATHLÃˆTES PERTINENTS* (titre en majuscules et italique)\n"

            "   â†’ Donne au moins 3 exemples rÃ©alistes et cohÃ©rents avec la cible. Indiquer les chiffres clÃ©s de leur notoriÃ©tÃ© sur les rÃ©seaux sociaux.\n\n"

            " ðŸ“¶  *IMPACT DE LA CAMPAGNE* (titre en majuscules et italique) \n"

            "   â†’ Instagram (moyenne likes, engagement %)\n"
            "   â†’ TikTok (moyenne vues, taux de partage)\n"
            "   â†’ YouTube (moyenne vues, durÃ©e de visionnage)\n"
            "   â†’ Spotify (streams moyens, abonnÃ©s mensuels)\n"
            "   â†’ Twitch (moyenne viewers en live, abonnÃ©s)\n\n"
            "   â†’ RÃ©sultat global de l'activation (chiffres clÃ©s)\n\n"

            " ðŸ’¶  *ESTIMATION DU COÃ›T* (titre en majuscules et italique)\n"

            "   â†’ Estime le coÃ»t avec les tendances du marchÃ©\n"
            "Ã‰vite tout langage trop vague. Donne des chiffres basÃ©s sur les benchmarks rÃ©cents. "
            "Ne mets pas de # ou de markdown, le texte doit Ãªtre propre et lisible."
        )


        # Appel Ã  OpenAI
        completion = client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ]
        )

        result = completion.choices[0].message.content

        # Stocker rÃ©sultat en session (ou en variable globale pour PDF)
        request.environ['last_result'] = result  

        return jsonify({"propositions": result})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ------------------------------
# GÃ‰NÃ‰RATION DU PDF
# ------------------------------
@app.route("/download_pdf", methods=["POST"])
def download_pdf():
    try:
        data = request.get_json()
        content = data.get("content", "")

        if not content:
            return jsonify({"error": "Pas de contenu Ã  exporter"}), 400

        # CrÃ©ation PDF
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        styles = getSampleStyleSheet()
        story = []

        # Titre
        story.append(Paragraph("<b>Propositions Marketing Sport</b>", styles["Title"]))
        story.append(Spacer(1, 20))

        # Contenu
        for line in content.split("\n"):
            if line.strip():
                if line[0].isdigit() and "." in line[:3]:  # sous-titres numÃ©rotÃ©s
                    story.append(Paragraph(f"<b>{line}</b>", styles["Heading3"]))
                else:
                    story.append(Paragraph(line, styles["Normal"]))
                story.append(Spacer(1, 10))

        # Mention lÃ©gale
        story.append(Spacer(1, 30))
        story.append(Paragraph(
            "Will Dorignac - Expert en marketing et communication - Tous droits rÃ©servÃ©s. Mail : wdorignac@gmail.com - TÃ©lÃ©phone : 0601401791",
        
            styles["Italic"]
        ))

        doc.build(story)
        buffer.seek(0)

        return send_file(
            buffer,
            as_attachment=True,
            download_name="propositions.pdf",
            mimetype="application/pdf"
        )

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ------------------------------
# LANCEMENT APP
# ------------------------------
if __name__ == "__main__":
    app.run(debug=True)